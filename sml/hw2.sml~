(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(*string, string list -> option string list*)
(*returns list that does not include the string*)
fun all_except_option(string, list)=
    let
	fun recurssion(string, list, acc, found)=
	    case list of
		[] => if(found)then
			  SOME(acc)
		      else
			  NONE
	      | a::b' => if(same_string(a, string))then
			     recurssion(string, b', acc, true)
			 else
			     recurssion(string, b', a::acc, false orelse found)
    in
	recurssion(string, list, [], false)
    end
	
(*string list list, string -> string list*)
(*returns words that have substitutions of string but does not return the word itself*)
fun get_substitutions1(lists, string)=
    case lists of
	[] => []
      | a::b' => case all_except_option(string, a) of
		     NONE => get_substitutions1(b', string)
		   | SOME(substitions) => substitions @ get_substitutions1(b', string)

(*string list list, string -> string list*)
(*same as get_substitutions but with helper function*)
fun get_substitutions2(lists, string)=
    let
	fun get_substitutions_helper(lists, string, acc)=
	    case lists of
		[] => acc	  
	      | a::b' => case all_except_option(string, a) of
			     NONE => get_substitutions_helper(b', string, acc)
			   | SOME(substitions) => get_substitutions_helper(b', string, substitions @ acc)
									 
    in
	get_substitutions_helper(lists, string, [])
    end
	
(* string list list, {first, middle, last} -> {first, last, middle} list*)
(* returns simliar names that are in list*)
fun similar_names(lists, name)=
    let
	val first_name = case name of
			     {first = x, middle = y, last = z} => x
	val middle_name = case name of
			      {first = x, middle = y, last = z} => y
	val last_name = case name of
			     {first = x, middle = y, last = z} => z
								 
	fun get_names(names, name)=
	    case names of
		[] => []
	      | a::b' => case name of
			     {first = x, middle = y, last = z} => {first = a, last = z, middle = y}::get_names(b', name)
    in
	{first = first_name, last = last_name, middle = middle_name}::get_names(get_substitutions1(lists, first_name),name)
									       
    end
	
		
			 

	
			    
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)
